# Specific template data to be written to a given file.
# On run, baker will search for files it's created whose names
# match files here.  When it finds a match, it writes the
# data to the file of that name.

# Known issues:
# For some reason, .gitignore doesn't seem to function as expected
README.md: |
  Description

  ## Installation

  Description

  ## Usage

  Description

  ## Contributing

  Description
LICENSE: |
  Permission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the “Software”),to deal in the Software without restriction, including without limitationthe rights to use, copy, modify, merge, publish, distribute, sublicense,and/or sell copies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHERDEALINGS IN THE SOFTWARE.
main.py: |
  from src import logger

  logging = logger.setup_logger(__name__, verbose=True)

  if __name__ == "__main__":
    logging.info(f"Program start")
logger.py: |
  import logging

  from rich.logging import RichHandler

  def setup_logger(
    name: str = __name__, level=logging.INFO, verbose: bool=False,quiet=False) -> logging.Logger:
      if quiet:
        level = logging.WARNING
      elif verbose:
        level = logging.DEBUG
      logger = logging.getLogger(name)
      logger.setLevel(level)
      logger.propagate = False
      if not logger.handlers:
        rich_handler=RichHandler(
          rich_tracebacks=True,
          markup=True,
          show_time=True,
          show_leve=True,
          show_path=True,
          )
        formatter = logging.Formatter("%(message)s")
        rich_handler.setFormatter(formatter)
        logger.addHandler(rich_handler)
      return logger

CHANGELOG.md: |
  # Changelog

  All notable changes to this project will be documented in this file.
  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.10), and this project adheres to [Semantic Versioning](https://semver.orgspec/v2.0.0.html).
.gitignore: |
  .venv
  __init__.py
  __pycache__/